# -*- coding: utf-8 -*-
"""semana0605_cenarioseguro.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xswuUTe0krD1Ic8WBtGsn6Tc-BbttkET
"""

pip install cryptography

from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes

#Geração das chaves
def gerar_chaves():
    chave_privada = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    chave_publica = chave_privada.public_key()

    return chave_privada, chave_publica

#Cifrar a mensagem para garantir confidencialidade
def cifra_mensagem(mensagem, chave_publica):
    mensagem_bytes = mensagem.encode('utf-8')
    mensagem_cifrada = chave_publica.encrypt(mensagem_bytes, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

    return mensagem_cifrada

#Decifrar a mensagem
def decifrar_mensagem(mensagem_cifrada, chave_privada):
    mensagem_decifrada = chave_privada.decrypt(mensagem_cifrada, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

    return mensagem_decifrada.decode('utf-8')

#Assinar a mensagem para garantir integridade, autenticidade e irretratabilidade
def assinar_mensagem(chave_privada, mensagem):
    assinatura = chave_privada.sign(mensagem, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

    return assinatura

#Verificar assinatura
def verificar_assinatura(chave_publica, mensagem, assinatura):
    try:
        chave_publica.verify(assinatura, mensagem, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

        return True

    except Exception as e:
        print(f"Falha na verificação: {e}")

        return False

#Exemplo
chave_privada, chave_publica = gerar_chaves()

mensagem = "Mensagem de teste segura"
print("Mensagem original: ", mensagem)

#Cifrar mensagem para confidencialidade
mensagem_cifrada = cifra_mensagem(mensagem, chave_publica)
print("Mensagem cifrada: ", mensagem_cifrada)

#Assinar mensagem cifrada
assinatura = assinar_mensagem(chave_privada, mensagem_cifrada)
print("Assinatura gerada.")

#Verificar assinatura
validade = verificar_assinatura(chave_publica, mensagem_cifrada, assinatura)
print("Assinatura válida:", validade)

#Decifrar a mensagem para leitura
mensagem_decifrada = decifrar_mensagem(mensagem_cifrada, chave_privada)
print("Mensagem decifrada: ", mensagem_decifrada)