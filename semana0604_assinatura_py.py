# -*- coding: utf-8 -*-
"""semana0604_assinatura.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DSucpQXKFoDZifdAfClZOsMVPIA7tlLE
"""

pip install cryptography

from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

def generate_keys():
  private_key = rsa.generate_private_key(public_exponent=65537,key_size=2048,)
  public_key = private_key.public_key()

  return private_key, public_key

def sign_message(private_key, message):
  signature = private_key.sign(message, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

  return signature

def verify_signature (public_key, message, signature):
  try:
    public_key.verify(signature, message, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

    return True

  except Exception as e:
    print("Verificacao falhou: {e}")
    return False

#Exemplo
private_key, public_key = generate_keys()

#Mensagem a ser assinada
message = "Esta e a minha segunda mensagem"
message_bytes = message.encode('utf-8')

#Assinar
signature = sign_message(private_key, message_bytes)
print("Assinatura gerada com sucesso.")

#Verificar assinatura
valid = verify_signature(public_key, message_bytes, signature)
if valid:
  print("Assinatura verificada com sucesso.")
else:
  print("Assinatura invalida.")