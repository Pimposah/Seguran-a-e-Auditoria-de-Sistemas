# -*- coding: utf-8 -*-
"""semana0606_envelopecriptografico

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDUSRaQBsHZ0cLOVMosXr5Z-tfmetqCa
"""

pip install cryptography

from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import os

#Gerar chaves RSA
def gerar_chaves_rsa():
    chave_privada = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    chave_publica = chave_privada.public_key()
    return chave_privada, chave_publica

#Gerar chave AES
def gerar_chave_aes():
    return os.urandom(32)  #256 bits para AES

#Função para adicionar padding manualmente
def adicionar_padding(mensagem):
    tamanho_bloco = 16  #AES usa blocos de 16 bytes
    padding_size = tamanho_bloco - (len(mensagem) % tamanho_bloco)
    return mensagem + bytes([padding_size] * padding_size)  #Adiciona bytes de padding

#Remover padding manualmente
def remover_padding(mensagem):
    padding_size = mensagem[-1]
    return mensagem[:-padding_size]  #Retorna a mensagem sem o padding

#Cifrar mensagem com AES
def cifra_mensagem_aes(mensagem, chave_aes):
    iv = os.urandom(16)  # Vetor de inicialização
    cipher = Cipher(algorithms.AES(chave_aes), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    #Adiciona padding à mensagem
    mensagem_padded = adicionar_padding(mensagem.encode('utf-8'))
    return iv + encryptor.update(mensagem_padded) + encryptor.finalize()  #Retorna IV + mensagem cifrada

#Decifrar mensagem com AES
def decifra_mensagem_aes(mensagem_cifrada, chave_aes):
    iv = mensagem_cifrada[:16]  #Extrair IV
    mensagem_cifrada = mensagem_cifrada[16:]  #Remover IV

    cipher = Cipher(algorithms.AES(chave_aes), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    mensagem_decifrada = decryptor.update(mensagem_cifrada) + decryptor.finalize()
    return remover_padding(mensagem_decifrada).decode('utf-8')  #Remove o padding

#Cifrar a chave AES com a chave pública RSA
def cifra_chave_aes(chave_aes, chave_publica):
    return chave_publica.encrypt(chave_aes, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

#Decifrar a chave AES com a chave privada RSA
def decifra_chave_aes(chave_cifrada, chave_privada):
    return chave_privada.decrypt(chave_cifrada, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=None))

#Assinar a mensagem cifrada
def assinar_mensagem(chave_privada, mensagem):
    return chave_privada.sign(mensagem, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())

#Verificar assinatura
def verificar_assinatura(chave_publica, mensagem, assinatura):
    try:
        chave_publica.verify(assinatura, mensagem, padding.PSS(mgf=padding.MGF1(hashes.SHA256()), salt_length=padding.PSS.MAX_LENGTH), hashes.SHA256())
        return True
    except Exception as e:
        print(f"Falha na verificação: {e}")
        return False

#Exemplo
if __name__ == "__main__":
    #Gerar chaves RSA
    chave_privada_rsa, chave_publica_rsa = gerar_chaves_rsa()

    #Mensagem a ser cifrada
    mensagem = "Mensagem de teste segura com envelope criptográfico"
    print("Mensagem original:", mensagem)

    #Gerar chave AES
    chave_aes = gerar_chave_aes()

    #Cifrar a mensagem com AES
    mensagem_cifrada = cifra_mensagem_aes(mensagem, chave_aes)
    print("Mensagem cifrada com AES:", mensagem_cifrada)

    #Cifrar a chave AES com a chave pública RSA
    chave_aes_cifrada = cifra_chave_aes(chave_aes, chave_publica_rsa)
    print("Chave AES cifrada com RSA.")

    #Assinar a mensagem cifrada
    assinatura = assinar_mensagem(chave_privada_rsa, mensagem_cifrada)
    print("Assinatura gerada.")

    #Verificar assinatura
    validade = verificar_assinatura(chave_publica_rsa, mensagem_cifrada, assinatura)
    print("Assinatura válida:", validade)

    #Decifrar a chave AES com a chave privada RSA
    chave_aes_decifrada = decifra_chave_aes(chave_aes_cifrada, chave_privada_rsa)
    print("Chave AES decifrada.")

    #Decifrar a mensagem com a chave AES decifrada
    mensagem_decifrada = decifra_mensagem_aes(mensagem_cifrada, chave_aes_decifrada)
    print("Mensagem decifrada:", mensagem_decifrada)